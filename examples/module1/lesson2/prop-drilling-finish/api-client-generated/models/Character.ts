/* tslint:disable */
/* eslint-disable */
/**
 * Rick and Morty API
 * Access information about characters from Rick and Morty.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CharacterOrigin } from './CharacterOrigin';
import {
    CharacterOriginFromJSON,
    CharacterOriginFromJSONTyped,
    CharacterOriginToJSON,
    CharacterOriginToJSONTyped,
} from './CharacterOrigin';
import type { CharacterLocation } from './CharacterLocation';
import {
    CharacterLocationFromJSON,
    CharacterLocationFromJSONTyped,
    CharacterLocationToJSON,
    CharacterLocationToJSONTyped,
} from './CharacterLocation';

/**
 * 
 * @export
 * @interface Character
 */
export interface Character {
    /**
     * The id of the character.
     * @type {number}
     * @memberof Character
     */
    id?: number;
    /**
     * The name of the character.
     * @type {string}
     * @memberof Character
     */
    name?: string;
    /**
     * The status of the character (Alive, Dead or unknown).
     * @type {string}
     * @memberof Character
     */
    status?: string;
    /**
     * The species of the character.
     * @type {string}
     * @memberof Character
     */
    species?: string;
    /**
     * The type or subspecies of the character.
     * @type {string}
     * @memberof Character
     */
    type?: string;
    /**
     * The gender of the character.
     * @type {string}
     * @memberof Character
     */
    gender?: string;
    /**
     * 
     * @type {CharacterOrigin}
     * @memberof Character
     */
    origin?: CharacterOrigin;
    /**
     * 
     * @type {CharacterLocation}
     * @memberof Character
     */
    location?: CharacterLocation;
    /**
     * Link to the character's image.
     * @type {string}
     * @memberof Character
     */
    image?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Character
     */
    episode?: Array<string>;
    /**
     * Link to the character's own URL endpoint.
     * @type {string}
     * @memberof Character
     */
    url?: string;
    /**
     * Time at which the character was created in the database.
     * @type {Date}
     * @memberof Character
     */
    created?: Date;
}

/**
 * Check if a given object implements the Character interface.
 */
export function instanceOfCharacter(value: object): value is Character {
    return true;
}

export function CharacterFromJSON(json: any): Character {
    return CharacterFromJSONTyped(json, false);
}

export function CharacterFromJSONTyped(json: any, ignoreDiscriminator: boolean): Character {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'name': json['name'] == null ? undefined : json['name'],
        'status': json['status'] == null ? undefined : json['status'],
        'species': json['species'] == null ? undefined : json['species'],
        'type': json['type'] == null ? undefined : json['type'],
        'gender': json['gender'] == null ? undefined : json['gender'],
        'origin': json['origin'] == null ? undefined : CharacterOriginFromJSON(json['origin']),
        'location': json['location'] == null ? undefined : CharacterLocationFromJSON(json['location']),
        'image': json['image'] == null ? undefined : json['image'],
        'episode': json['episode'] == null ? undefined : json['episode'],
        'url': json['url'] == null ? undefined : json['url'],
        'created': json['created'] == null ? undefined : (new Date(json['created'])),
    };
}

export function CharacterToJSON(json: any): Character {
    return CharacterToJSONTyped(json, false);
}

export function CharacterToJSONTyped(value?: Character | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'name': value['name'],
        'status': value['status'],
        'species': value['species'],
        'type': value['type'],
        'gender': value['gender'],
        'origin': CharacterOriginToJSON(value['origin']),
        'location': CharacterLocationToJSON(value['location']),
        'image': value['image'],
        'episode': value['episode'],
        'url': value['url'],
        'created': value['created'] == null ? undefined : ((value['created']).toISOString()),
    };
}

