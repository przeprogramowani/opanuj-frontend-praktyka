/* tslint:disable */
/* eslint-disable */
/**
 * Rick and Morty API
 * Access information about characters from Rick and Morty.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CharacterLocation } from './CharacterLocation';
import {
    CharacterLocationFromJSON,
    CharacterLocationFromJSONTyped,
    CharacterLocationToJSON,
} from './CharacterLocation';
import type { CharacterOrigin } from './CharacterOrigin';
import {
    CharacterOriginFromJSON,
    CharacterOriginFromJSONTyped,
    CharacterOriginToJSON,
} from './CharacterOrigin';

/**
 * 
 * @export
 * @interface Character
 */
export interface Character {
    /**
     * The id of the character.
     * @type {number}
     * @memberof Character
     */
    id?: number;
    /**
     * The name of the character.
     * @type {string}
     * @memberof Character
     */
    name?: string;
    /**
     * The status of the character (Alive, Dead or unknown).
     * @type {string}
     * @memberof Character
     */
    status?: string;
    /**
     * The species of the character.
     * @type {string}
     * @memberof Character
     */
    species?: string;
    /**
     * The type or subspecies of the character.
     * @type {string}
     * @memberof Character
     */
    type?: string;
    /**
     * The gender of the character.
     * @type {string}
     * @memberof Character
     */
    gender?: string;
    /**
     * 
     * @type {CharacterOrigin}
     * @memberof Character
     */
    origin?: CharacterOrigin;
    /**
     * 
     * @type {CharacterLocation}
     * @memberof Character
     */
    location?: CharacterLocation;
    /**
     * Link to the character's image.
     * @type {string}
     * @memberof Character
     */
    image?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Character
     */
    episode?: Array<string>;
    /**
     * Link to the character's own URL endpoint.
     * @type {string}
     * @memberof Character
     */
    url?: string;
    /**
     * Time at which the character was created in the database.
     * @type {Date}
     * @memberof Character
     */
    created?: Date;
}

/**
 * Check if a given object implements the Character interface.
 */
export function instanceOfCharacter(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CharacterFromJSON(json: any): Character {
    return CharacterFromJSONTyped(json, false);
}

export function CharacterFromJSONTyped(json: any, ignoreDiscriminator: boolean): Character {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'status': !exists(json, 'status') ? undefined : json['status'],
        'species': !exists(json, 'species') ? undefined : json['species'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'gender': !exists(json, 'gender') ? undefined : json['gender'],
        'origin': !exists(json, 'origin') ? undefined : CharacterOriginFromJSON(json['origin']),
        'location': !exists(json, 'location') ? undefined : CharacterLocationFromJSON(json['location']),
        'image': !exists(json, 'image') ? undefined : json['image'],
        'episode': !exists(json, 'episode') ? undefined : json['episode'],
        'url': !exists(json, 'url') ? undefined : json['url'],
        'created': !exists(json, 'created') ? undefined : (new Date(json['created'])),
    };
}

export function CharacterToJSON(value?: Character | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'status': value.status,
        'species': value.species,
        'type': value.type,
        'gender': value.gender,
        'origin': CharacterOriginToJSON(value.origin),
        'location': CharacterLocationToJSON(value.location),
        'image': value.image,
        'episode': value.episode,
        'url': value.url,
        'created': value.created === undefined ? undefined : (value.created.toISOString()),
    };
}

