/* tslint:disable */
/* eslint-disable */
/**
 * Rick and Morty API
 * Access information about characters from Rick and Morty.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Character } from './Character';
import {
    CharacterFromJSON,
    CharacterFromJSONTyped,
    CharacterToJSON,
} from './Character';
import type { CharacterListResponseInfo } from './CharacterListResponseInfo';
import {
    CharacterListResponseInfoFromJSON,
    CharacterListResponseInfoFromJSONTyped,
    CharacterListResponseInfoToJSON,
} from './CharacterListResponseInfo';

/**
 * 
 * @export
 * @interface CharacterListResponse
 */
export interface CharacterListResponse {
    /**
     * 
     * @type {CharacterListResponseInfo}
     * @memberof CharacterListResponse
     */
    info?: CharacterListResponseInfo;
    /**
     * 
     * @type {Array<Character>}
     * @memberof CharacterListResponse
     */
    results?: Array<Character>;
}

/**
 * Check if a given object implements the CharacterListResponse interface.
 */
export function instanceOfCharacterListResponse(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CharacterListResponseFromJSON(json: any): CharacterListResponse {
    return CharacterListResponseFromJSONTyped(json, false);
}

export function CharacterListResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): CharacterListResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'info': !exists(json, 'info') ? undefined : CharacterListResponseInfoFromJSON(json['info']),
        'results': !exists(json, 'results') ? undefined : ((json['results'] as Array<any>).map(CharacterFromJSON)),
    };
}

export function CharacterListResponseToJSON(value?: CharacterListResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'info': CharacterListResponseInfoToJSON(value.info),
        'results': value.results === undefined ? undefined : ((value.results as Array<any>).map(CharacterToJSON)),
    };
}

