/* tslint:disable */
/* eslint-disable */
/**
 * Rick and Morty API
 * Access information about characters from Rick and Morty.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CharacterListResponseInfo
 */
export interface CharacterListResponseInfo {
    /**
     * The total number of characters.
     * @type {number}
     * @memberof CharacterListResponseInfo
     */
    count?: number;
    /**
     * The total number of pages.
     * @type {number}
     * @memberof CharacterListResponseInfo
     */
    pages?: number;
    /**
     * URL of the next page.
     * @type {string}
     * @memberof CharacterListResponseInfo
     */
    next?: string | null;
    /**
     * URL of the previous page.
     * @type {string}
     * @memberof CharacterListResponseInfo
     */
    prev?: string | null;
}

/**
 * Check if a given object implements the CharacterListResponseInfo interface.
 */
export function instanceOfCharacterListResponseInfo(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CharacterListResponseInfoFromJSON(json: any): CharacterListResponseInfo {
    return CharacterListResponseInfoFromJSONTyped(json, false);
}

export function CharacterListResponseInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): CharacterListResponseInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'count': !exists(json, 'count') ? undefined : json['count'],
        'pages': !exists(json, 'pages') ? undefined : json['pages'],
        'next': !exists(json, 'next') ? undefined : json['next'],
        'prev': !exists(json, 'prev') ? undefined : json['prev'],
    };
}

export function CharacterListResponseInfoToJSON(value?: CharacterListResponseInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'count': value.count,
        'pages': value.pages,
        'next': value.next,
        'prev': value.prev,
    };
}

